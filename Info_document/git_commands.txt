+++++++++++++++++++++++++++++++++++++++++

GIT COMMANDS
git format-patch -1 HEAD   ---> for patch creation
git apply --whitespace=fix mychanges.patch
git apply --reject --whitespace=fix path-to-patch   ---> to apply the patch 
git clone -b my-branch <git@github.com:user/myproject.git>   ----> clone the specific branch in the git-repo
git add <file-name>    ----> or ---> git add . to add the untracked changes
git commit -m "Test"   ----> to commit the changes
git push origin <branch-name>  ---> to push the changes to specified branch  (this will not work for protected branch)
git stash --all    -----> to stash the changes (move the untacked & added changes to local)
    git stash 
    git stash list
    git stash apply stash@{0}  (or) git stash pop stash@{0}      (pop will remove the stored stash and apply it to working dir)
git stash show -p stash@{stash-id}
git clean -n ---> askes permission to remove the untracked files and also will list all untracked files.
git clean -f ---> removed the listed untracked files...
git difftool --tool=vimdiff app_interface/capi/capi.c



1.git branch
2.git branch <latest_sfs(branch name)>
3.git branch
4.git checkout <latest_sfs(branch name)>
5.git branch
6.git add
7.git commit
8.git push <latest_sfs(branch)>
9.added the reviewer here
git push origin latest_sfs

++++++++++++++++++++++++++++++++++++++++++


1. after resolving the merge conflicts,
   git add <file_name>
   //git commit --amend (not reqiured)
   git rebase --continue      (git rebase --abort)
   git rebase --skip
   git log
   
   
   
   git branch
   git checkout release/mr2-full   ---> (release/mr2-full is the branch i need to pull the changes)
   git pull
   git log     ----> to check the latest commit
   git branch
   git checkout enhance/pm_tranceiver    ----> (go back to the working branch)
   git rebase release/mr2-full
      if (merge_conflict)
	  {
	         1. resolve the merge conflicts by manually changing those files.
			 2. git add <file_name>
			 3. git commit --amend (not reqiured)
			 4. git rebase --continue
			 5. git rebase --skip
			 6. git log
	  }
   git log              ----> check that, your changes are on top of latest commit
   

***************** How to find the origin name *****************
git remote -v    -> will show us the origin name.
git remote add <name of the origin> <git link (https://github.com/mahee425/my_learnings.git)>


************* How to revert back the merged changes **********
1. git revert <merge commit id> -m 1    -    will remove the one commit.
2. it will create one more commit-id, just we need to save and exit from that file.
3. git push -u origin main 
4. the problem is it will create one more commit-id

************ changes in the branch should not reflected to main branch ***************** switching branch is not possiable when we have uncommitted changes in current branch 
1. create branch and checkout to it.
2. made some changes and without adding and commiting the changes try to switch to main branch.
3. it will show you the error.
   ex:- error: Your local changes to the following files would be overwritten by checkout:
				README.md
		Please commit your changes or stash them before you switch branches.
		Aborting 


*********** combining multiple commits into a single commit **************
for this we can use the  ( git rebase interactive )
1. we have some multiple commits which are related to the single implementation.
2. git rebase -i <last-commit you have did for the implementation> for example 123456 in this 6 is the last commit.
3. add squash to the commits of 12345 i.e s 1, s 2, s 3, s 4, s 5 pick 6 this means we are squashing all commits and combining with 6.
4. and give the latest commit name for this.
5. now check the git log to see the multiple commits will squashed into single commit.

********** How do we squash the commits and combined them as one commit ***************
1. Do some multiple commits, below are the multiple commits.
               commit 5bf33593f9c688c80ef3dd15d944a6bbdcfd3ee6 (HEAD -> main, origin/main, origin/HEAD)
				Merge: 0ed3dcd 089ac87
				Author: Kasu Mahindra <kasu.mahindra@mphasis.com>
				Date:   Thu Mar 14 14:20:52 2024 +0530
				
					Merge branch 'main' of https://github.com/mahee425/my_learnings
				
				commit 0ed3dcd0dd7e4e9cb8d191951394f3982a218e0b
				Author: Kasu Mahindra <kasu.mahindra@mphasis.com>
				Date:   Thu Mar 14 14:19:19 2024 +0530
				
					new_commit1
				
				commit 089ac87dd30eda297f4342e5fb6ead546d21e498
				Author: Kasu Mahindra <kasu.mahindra@mphasis.com>
				Date:   Thu Mar 14 14:17:42 2024 +0530
				
					new_commit
				
				commit f6af2998190e6129ed430a1899fda3c4469dab4f
				Merge: 38e991f 12c75ec
				Author: Kasu Mahindra <kasu.mahindra@mphasis.com>
				Date:   Wed Mar 13 13:32:36 2024 +0530
				
					new_file
				
				commit 38e991f28fdcd86654a014d3437efedddf862e43
				Author: Kasu Mahindra <kasu.mahindra@mphasis.com>
				Date:   Wed Mar 13 13:30:12 2024 +0530
				
					new_file
				
				commit 12c75ec856e779333334640d9353a0f8b79d88ff
				Author: Kasu Mahindra <kasu.mahindra@mphasis.com>
				Date:   Wed Mar 13 13:26:42 2024 +0530
				
					added new file
 
 
5bf33593f9c688c80ef3dd15d944a6bbdcfd3ee6
0ed3dcd0dd7e4e9cb8d191951394f3982a218e0b
089ac87dd30eda297f4342e5fb6ead546d21e498
f6af2998190e6129ed430a1899fda3c4469dab4f
38e991f28fdcd86654a014d3437efedddf862e43
12c75ec856e779333334640d9353a0f8b79d88ff


2. the above listed commits are common for same requirement.
   if you want to combine all the commits and make it as one commit.

3. use "git rebase -i <pick the from commit(12c75ec856e779333334640d9353a0f8b79d88ff)>"

4. it will take to you to file
		r 5bf33593f9c688c80ef3dd15d944a6bbdcfd3ee6
		s 0ed3dcd0dd7e4e9cb8d191951394f3982a218e0b
		s 089ac87dd30eda297f4342e5fb6ead546d21e498
		s f6af2998190e6129ed430a1899fda3c4469dab4f
		s 38e991f28fdcd86654a014d3437efedddf862e43
		s 12c75ec856e779333334640d9353a0f8b79d88ff
		
note:- all 's' - squesh and 'r' - reword - combines all 's' with 'r'

***********************************************************************************************************************
1. when we get the merge conflict while we are doing "merge or rebase"
2. After fixing the merge conflicts
3. run the "git merge --continue"  or "git rebase --continue"  
   

==================================== Important to check & understand ============================
 ************ function pointer array *************
 
static unsigned int no_carriers = 2;
static void carr_to_inactive(carrier_details_t *carr_st_info);
static void carr_to_active(carrier_details_t *carr_st_info);
static void carr_to_sleep(carrier_details_t *carr_st_info);
static void not_appllicable_state(carrier_details_t *carr_st_info);

static void (*(next_carrier_fsm[2][3]))(carrier_details_t *info_carr) =
{
   //DISABLED state
   {
      carr_to_inactive,
      not_applicable_state,
      not_applicable_state
   },
   //READY state
   {
      not_applicable_state,
      carr_to_active,
      carr_to_sleep
   }
};
==================================================================================================== 
